@{
    ViewData["Title"] = " - Receiving Receipt";
}

<style>
    .cmd-buttons {
        margin-left: 10px;
        width: 90px;
    }

    .recordcontent {
        display: none;
        padding: 5px;
    }

    .k-floating-label-container {
        width: 100%;
    }

    /*.modal-dialog {
        max-width: 1500px;
    }*/

    #modal-dialog-journal {
        max-width: 1500px;
    }

    #modal-dialog-lineDetail {
        max-width: 1250px;
    }
</style>

<div class="lookupPanel">
    <div class="input-group">
        <input type="text" class="form-control" placeholder="Search..." id="search">
        <button type="button"
                class="btn bg-transparent"
                style="margin-left: -40px; z-index: 90;"
                id="clearSearch">
            <i class="fa fa-times"></i>
        </button>
    </div>
</div>

<div class="gridview">
    <div class="row" style="margin-bottom: 5px; margin-top: 5px">
        <div class="col-md-6">
            <h5 style="margin-top: 10px;"><i class="fas fa-hand-holding"></i> Receiving Receipt</h5>
        </div>

        <div class="col-md-6">
            <div class="CmdHome">
                <button class="btn btn-light cmd-buttons float-right btn-labeled"
                        type="button">
                    <span class="btn-label">
                        <i class="fa fa-arrow-left"></i>
                    </span>Home
                </button>
            </div>

            <div class="CmdAdd">
                @if ((ViewData["UserRights"] as webfmis.Models.MstUserForm).CanAdd)
                {
                    <button class="btn btn-primary cmd-buttons float-right btn-labeled"
                            type="button">
                        <span class="btn-label">
                            <i class="fa fa-plus-square"></i>
                        </span>
                        Add
                    </button>
                }
            </div>
        </div>
    </div>

    @(Html.Kendo().Grid<webfmis.Models.TrnReceivingReceipt>()
    .Name("mainList")
    .Columns(columns => {

        if ((ViewData["UserRights"] as webfmis.Models.MstUserForm).CanEdit)
        {
            columns.Command(command => command.Custom("Detail")
               .Click("CmdDetail"))
               .Width(100);
        }
        else
        {
            columns.Command(command => command.Custom("Detail")
               .Click("CmdDetail"))
               .HtmlAttributes(new { @class = "k-state-disabled" })
               .Width(100);
        }

        columns.Bound(x => x.Id).Filterable(false).Width(100).Hidden();
        columns.Bound(x => x.Rrnumber).Title("RR Number").Filterable(x => x.Cell(y => y.Operator("Contains"))).Width(150);
        columns.Bound(x => x.Rrdate).Title("Date").Format("{0:MM/dd/yyyy}").Filterable(x => x.Cell(y => y.Operator("Contains"))).Width(200);
        columns.Bound(x => x.SupplierName).Title("Supplier").Width(300);
        columns.Bound(x => x.DocumentReference).Title("Doc Ref").Width(150);
        columns.Bound(x => x.Amount).
            Title("Amount")
            .Format("{0:n2}")
            .Width(125)
            .HtmlAttributes(new { @style = "text-align: end" });
        columns.Bound(x => x.PaidAmount)
            .Title("Paid Amount")
            .Format("{0:n2}")
            .Width(125)
            .HtmlAttributes(new { @style = "text-align: end" });
        columns.Bound(x => x.IsLocked).Title("L")
            .ClientTemplate("<input type='checkbox' disabled #= IsLocked ? checked='checked' : '' # />")
            .Filterable(false)
            .Width(50);
    })
    .Selectable(x => x.Mode(GridSelectionMode.Single))
    .Pageable()
    .Sortable()
    .Scrollable()
    .Filterable()
    .HtmlAttributes(new { style = "height:700px;" })
    //.Filterable(x => x.Mode(GridFilterMode.Row))
    .Filterable()
    .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(10)
        .ServerOperation(true)
        .Read(read => read.Action("ReceivingReceiptList", "TrnReceivingReceipt"))
        .Filter(x => x.Add( a=> a.Rrdate).IsEqualTo(DateTime.Now.Date))
    ))

</div>

<div class="recordcontent">
    <div class="row" style="margin-bottom: 5px; margin-top: 5px">
        <div class="col-md-6">
            <h5 style="margin-top: 10px;"><i class="fas fa-hand-holding"></i> Receiving Receipt Detail</h5>
        </div>

        <div class="col-md-6">
            <div class="CmdBack">
                <button class="btn btn-light cmd-buttons float-right btn-labeled"
                        type="button">
                    <span class="btn-label">
                        <i class="fa fa-arrow-left"></i>
                    </span>
                    Back
                </button>
            </div>

            <div class="CmdSave">
                @if ((ViewData["UserRights"] as webfmis.Models.MstUserForm).CanLock)
                {
                    <button class="btn btn-primary cmd-buttons float-right btn-labeled"
                            type="button">
                        <span class="btn-label">
                            <i class="fa fa-lock"></i>
                        </span>
                        Save
                    </button>
                }
            </div>

            <div class="CmdDelete">
                @if ((ViewData["UserRights"] as webfmis.Models.MstUserForm).CanDelete)
                {
                    <button class="btn btn-danger cmd-buttons float-right btn-labeled"
                            type="button"
                            style="width: 100px">
                        <span class="btn-label">
                            <i class="fa fa-trash"></i>
                        </span>
                        Delete
                    </button>
                }
            </div>

            <div class="CmdPreview">
                @if ((ViewData["UserRights"] as webfmis.Models.MstUserForm).CanPrint)
                {
                    <button class="btn btn-light cmd-buttons float-right btn-labeled"
                            type="button">
                        <span class="btn-label">
                            <i class="fa fa-print"></i>
                        </span>
                        Print
                    </button>
                }
            </div>

            <div class="CmdJournal">
                <button class="btn btn-light cmd-buttons float-right btn-labeled"
                        type="button"
                        style="width: 50px">
                    <span class="btn-label">
                        <i class="fas fa-book"></i>
                    </span>
                </button>
            </div>

            @if ((ViewData["UserRights"] as webfmis.Models.MstUserForm).CanEdit)
            {
                <div class="CmdNext">
                    <button class="btn btn-light cmd-buttons float-right btn-labeled"
                            type="button"
                            style="width: 50px">
                        <span class="btn-label">
                            <i class="fa fa-arrow-right"></i>
                        </span>
                    </button>
                </div>

                <div class="CmdPrev">
                    <button class="btn btn-light cmd-buttons float-right btn-labeled"
                            type="button"
                            style="width: 50px">
                        <span class="btn-label">
                            <i class="fa fa-arrow-left"></i>
                        </span>
                    </button>
                </div>
            }
        </div>
    </div>

    <div id="recordcontentform" />
</div>

<section id="journalSection">
    <div class="modal fade" id="journalModal" data-bs-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div id="modal-dialog-journal" class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel"><i class="fas fa-book"></i> Journal Entries</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div id="journalcontentform" />
                </div>
                @*<div class="modal-footer">

                    </div>*@
            </div>
        </div>
    </div>
</section>

<section id="lineDetailSection">
    <div class="modal fade" id="lineDetailModal" data-bs-backdrop="static" tabindex="-" role="dialog" aria-labelledby="lineModalLabel" aria-hidden="true">
        <div id="modal-dialog-lineDetail" class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="lineModalLabel"><i class="fas fa-hand-holding"></i> Receiving Receipt Line Detail</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div id="linecontentform" />
                </div>
                <div class="modal-footer">
                    <div class="CmdSaveRRLine">
                        <button class="btn btn-primary cmd-buttons float-right btn-labeled"
                                type="button" onclick="SaveRRLine()">
                            <i class="fas fa-clipboard-check"></i> Save
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<section id="downloadPOSection">
    <div class="modal fade" id="downloadPOModal" data-bs-backdrop="static" tabindex="-" role="dialog" aria-labelledby="downloadPOModalLabel" aria-hidden="true">
        <div id="modal-dialog-lineDetail" class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="downloadPOModalLabel"><i class="fas fa-hand-holding"></i> PO Status</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div id="downloadPOform" />
                </div>
                <div class="modal-footer">
                    <div class="CmdDownloadPO">
                        <button class="btn btn-primary cmd-buttons float-right btn-labeled"
                                type="button" onclick="ApplyPO()">
                            <i class="fas fa-clipboard-check"></i> OK
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<script>
    $header = $(".gridview");
    $content = $(".recordcontent");
    $transitionTime = 200;

    $isDirty = false;

    $isSearchFocused = false;

    $hasErrors = false;

    $Entity = new Object();

    $UserRights = JSON.parse('@Html.Raw(Json.Serialize(ViewData["UserRights"]))');

    $SelectedLine = new Object();

    $isNewLine = new Object();

    $(".CmdHome").click(function () {
        location.href = "@Url.Action("Index","Home")";
    });

    $(".CmdAdd").click(function () {
        $header.hide($transitionTime);
        $content.show($transitionTime);

        $("#recordcontentform").empty();
        $("#recordcontentform").load("/TrnReceivingReceipt/Add");
    });

    function CmdDetail(e)
    {
        e.preventDefault();

        var grid = $("#mainList").getKendoGrid();
        var item = grid.dataItem($(e.target).closest("tr"));

        grid.select($(e.target).closest("tr"));

        $Entity = item;

        $header.hide($transitionTime);
        $content.show($transitionTime);

        loadPartialView(item.Id);
    }

    $(".CmdBack").click(function () {
        if ($isDirty) {
            $isDirty = false;

            Swal.fire({
                icon: "warning",
                text: "Record has been changed, Do you want to save it?",
                showCancelButton: true,
                confirmButtonText: "Save",
                cancelButtonText: "No"
            })
                .then((result) => {
                    if (result.isConfirmed) {
                        Save();

                        $header.show($transitionTime);
                        $content.hide($transitionTime);
                    }
                    else {
                        if (result.dismiss == "cancel") {
                            $header.show($transitionTime);
                            $content.hide($transitionTime);

                            loadPartialView($Entity.Id);
                        }
                        else {
                            $isDirty = true;
                        }
                    }
                })

            if (typeof e !== null) {
                e.preventDefault();
            }
        }

        $content.hide($transitionTime);
        $header.show($transitionTime);
    });

    $(".CmdSave").click(function (e) {
        Save(e)

        if($UserRights.CanLock)
        {
            Swal.fire({
                icon: 'success',
                text: 'Record saved successfully!',
                showConfirmButton: true,
            })
        }
    });

     $(".CmdDelete").click(function () {
        Swal.fire({
            icon: 'error',
            text: "Do you want to delete '" + $Entity.Rrnumber + "'?",
            showCancelButton: true,
            confirmButtonText: "Delete",
            cancelButtonText: "No"
        })
        .then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: "@(Url.Action("Delete", "TrnReceivingReceipt"))",
                    type: "DELETE",
                    dataType: 'json',
                    contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                    data: { "Id": $Entity.Id },
                    success: function ()
                    {
                        var grid = $("#mainList").data("kendoGrid");
                        grid.dataSource.read();

                        $content.hide($transitionTime);
                        $header.show($transitionTime);

                        $isDirty = false;
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        Swal.fire({
                            icon: 'warning',
                            text: 'An error occured, Purchase order has been used in receiving!',
                            showConfirmButton: true,
                        })
                    }
                });
            }
            else if (result.isDenied)
            {
                //Do nothing...
            }
        })
     });

    $(".CmdJournal").click(function (e) {

        $("#journalcontentform").empty();
        $("#journalcontentform").load("/TrnJournal/Index?TrsType=RR&Id=" + $("#Id").val());

        $("#journalModal").modal("show");
    });


    $(".CmdPreview").click(function () {
        window.open(window.location.origin + "/TrnRR.html?RRId=" + $("#Id").val(),'_blank').focus()
    });

    function ShowDownloadPO()
    {
        $("#downloadPOform").empty();
        $("#downloadPOform").load("/TrnReceivingReceipt/DownLoadPO?Id=" + $("#Id").val() + "&supplierId=" + $("#SupplierId").val());

        $("#downloadPOModal").modal("show");
    }


    $("#clearSearch").click(function () {
        $("#search").val("");

        var grid = $("#mainList").data("kendoGrid");

        grid.dataSource.query({
            page: 1,
            pageSize: 10,
            filter: { field: "RRNumber", operator: "contains", value: $("#search").val() }
        })
    });

    $("#search").on("click", function (e) {
        if ($isDirty) {
            $isDirty = false;

            Swal.fire({
                icon: "warning",
                text: "Record has been changed, Do you want to save it?",
                showCancelButton: true,
                confirmButtonText: "Save",
                cancelButtonText: "No"
            })
                .then((result) => {
                    if (result.isConfirmed) {
                        Save();

                        $header.show($transitionTime);
                        $content.hide($transitionTime);
                    }
                    else {
                        if (result.dismiss == "cancel") {
                            $header.show($transitionTime);
                            $content.hide($transitionTime);

                            loadPartialView($Entity.Id);
                        }
                        else {
                            $isDirty = true;
                        }
                    }
                })

            e.preventDefault();
            return;
        }

        $header.show($transitionTime);
        $content.hide($transitionTime);
    })

    $("#search").change(function () {
        var grid = $("#mainList").data("kendoGrid");

        grid.dataSource.query({
            page: 1,
            pageSize: 10,
            filter: { field: "RRNumber", operator: "contains", value: $("#search").val() }
        })
            .then(function (e) {
                if (grid.dataSource.data().length == 1) {
                    $header.hide($transitionTime);
                    $content.show($transitionTime);

                    loadPartialView(grid.dataSource.view()[0].Id);
                }
            });
    });


    $(".CmdPrev").click(function () {
        if ($isDirty) {
            $isDirty = false;

            Swal.fire({
                icon: "warning",
                text: "Record has been changed, Do you want to save it?",
                showCancelButton: true,
                confirmButtonText: "Save",
                cancelButtonText: "No"
            })
                .then((result) => {
                    if (result.isConfirmed) {
                        Save();
                    }
                    else {
                        if (result.dismiss == "cancel") {
                            loadPartialView($Entity.Id);

                            turnPage("Prev")
                        }
                        else {
                            $isDirty = true;
                        }
                    }
                })

            e.preventDefault();
        }

        turnPage("Prev")
    });

    $(".CmdNext").click(function () {
        if ($isDirty) {
            $isDirty = false;

            Swal.fire({
                icon: "warning",
                text: "Record has been changed, Do you want to save it?",
                showCancelButton: true,
                confirmButtonText: "Save",
                cancelButtonText: "No"
            })
                .then((result) => {
                    if (result.isConfirmed) {
                        Save();
                    }
                    else {
                        if (result.dismiss == "cancel") {
                            loadPartialView($Entity.Id);

                            turnPage("Next");
                        }
                        else {
                            $isDirty = true;
                        }
                    }
                })

            e.preventDefault();
        }

        turnPage("Next");
    });
</script>

<script>
    function AddRRLine() {
        $isNewLine = true;

        loadPartialViewLineDetail($Entity.Id, $("#SupplierId").data().kendoComboBox.value())

        $("#lineDetailModal").modal("show");
    }

    function ApplyPO()
    {
        var detailSF1GridData = $("#detailSF1").data().kendoGrid._data;
        var detailSF1Data = detailSF1GridData.map(({ POId, ItemId, Particulars, UnitId, Cost, POQuantity, RRQuantity, BalanceQuantity, Pick, Quantity, ItemCode, ItemName, UnitName }) => ({ POId, ItemId, Particulars, UnitId, Cost, POQuantity, RRQuantity, BalanceQuantity, Pick, Quantity, ItemCode, ItemName, UnitName }));

        $.ajax({
            url: "@(Url.Action("DownloadPOLinesSelected", "TrnReceivingReceipt"))",
            type: "POST",
            dataType: 'json',
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
            data: { "rrId": $("#Id").val(), "poLinesSelected": detailSF1Data },
            success: function (data)
            {
                data.Result.forEach(function (line)
                {
                    var grid = $("#detailSF").getKendoGrid();
                    grid.dataSource.insert(line);
                })
            }
        });

        $("#downloadPOModal").modal("toggle");
    }

    function CmdDetailRRLine(e)
    {
        $isNewLine = false;

        e.preventDefault();

        var grid = $("#detailSF").getKendoGrid();
        var item = grid.dataItem($(e.target).closest("tr"));

        grid.select($(e.target).closest("tr"));

        $SelectedLine = item;

        loadPartialViewLineDetailDetail(item);

        $("#lineDetailModal").modal("show");
    }

    function CmdDeleteRRLine(e) {
        $isDirty = true;

        var grid = $("#detailSF").getKendoGrid();
        var item = grid.dataItem($(e.target).closest("tr"));

        Swal.fire({
            icon: 'error',
            text: "Do you want to delete the item?",
            showCancelButton: true,
            confirmButtonText: "Delete"
        })
        .then((result) => {
            if (result.isConfirmed) {

                item.set("IsDeleted", true);

                grid.dataSource.filter({ field: "IsDeleted", operator: "eq", value: false });
            }
        })
    }

    function EntityComboxChange(e) {
        $isDirty = true;

        if (this.element[0].id == "LinePoid")
        {
            //console.log(this.element[0].id + " " + this.element[0].value );
        }

        if (this.element[0].id == "LineItemId")
        {
            var selectedItem = $("#LineItemId").data("kendoComboBox").listView._dataItems[0];

            if (selectedItem != undefined)
            {
                $("#LineUnitId").data("kendoComboBox").value(selectedItem.UnitId);
                $("#LineUnitId").data("kendoComboBox").dataSource.read();
                $("#LineBaseUnitId").data("kendoComboBox").value(selectedItem.BaseUnitId);
                $("#LineBaseUnitId").data("kendoComboBox").dataSource.read();
                $("#LineVatId").data("kendoComboBox").value(selectedItem.VatId);
                $("#LineVatId").data("kendoComboBox").dataSource.read();
                $("#LineWTaxId").data("kendoComboBox").value(selectedItem.WTaxId);
                $("#LineWTaxId").data("kendoComboBox").dataSource.read();

                ComputeLineAmount(false);
            }
        }

        if (this.element[0].id == "LineUnitId")
        {
            var selectedUnit = $("#LineUnitId").data("kendoComboBox").listView._dataItems[0];

            if (selectedUnit != undefined)
            {
                ComputeBaseUnit(true);
            }
        }

        if (this.element[0].id == "LineVatId")
        {
            var selecteVat = $("#LineVatId").data("kendoComboBox").listView._dataItems[0];

            if (selecteVat != undefined) {
                ComputeTax(true);
            }
        }

        if (this.element[0].id == "LineWTaxId") {
            var selectedWTax = $("#LineWTaxId").data("kendoComboBox").listView._dataItems[0];

            if (selectedWTax != undefined) {
                ComputeTax(true);
            }
        }

        if (this.element[0].id == "SelectPoid")
        {
            var grid = $("#detailSF1").data("kendoGrid");

            grid.dataSource.query({
                page: 1,
                pageSize: 10,
                filter: { field: "POId", operator: "eq", value: $("#SelectPoid").val() }
            })
        }
    }

    function PickItem()
    {
        $isDirty = true;

        var grid = $("#detailSF1").getKendoGrid();

        console.log(grid.select());

        var item = grid.dataItem(grid.select());

        if (item != null)
        {
            if (item.Pick == false) {
                item.set("Quantity", 0);
            }
            else {
                item.set("Quantity", item.BalanceQuantity)
            }
        }
    }

    function DateChange() {
        $isDirty = true;
    }

    function QuantityChange() {
        $isDirty = true;

        ComputeLineAmount(true)
    }

    function CostChange() {
        $isDirty = true;

        ComputeLineAmount(true);
    }

    function IsLockedChanged() {
        $isDirty = true;
    }
</script>

@*Main Methods*@
<script>
    window.addEventListener('beforeunload', function (e) {
        if ($isDirty) {
            e.preventDefault();
            e.returnValue = '';
        }
    });

    function Save(e)
    {
        if($UserRights.CanLock)
        {
            var result = "";
            var grid = $("#mainList").data("kendoGrid");

            var frmDetail = $("#frmDetail");

            var formData = GetFormData(frmDetail);

            formData.IsLocked = $("#IsLocked")[0].checked;

            var detailSFGrid = $("#detailSF").getKendoGrid();

            detailSFGrid.dataSource.filter({});

            var detailSFGridData = $("#detailSF").data().kendoGrid.dataSource._data;
            var detailSFData = detailSFGridData.map(({ Id, Poid, ItemId, Particulars, Quantity, UnitId, Cost, Amount, BranchId, Vatid, Vatpercentage, Vatamount, Wtaxid, Wtaxpercentage, Wtaxamount, BaseUnitId, BaseQuantity, BaseCost, PONumber, ItemName, Unit, Branch, VatInfo, WTaxInfo, UnitConversionInfo, IsDeleted }) => ({ Id, Poid, ItemId, Particulars, Quantity, UnitId, Cost, Amount, BranchId, Vatid, Vatpercentage, Vatamount, Wtaxid, Wtaxpercentage, Wtaxamount, BaseUnitId, BaseQuantity, BaseCost, PONumber, ItemName, Unit, Branch, VatInfo, WTaxInfo, UnitConversionInfo, IsDeleted }));

             $.ajax({
                url: "@(Url.Action("Save", "TrnReceivingReceipt"))",
                type: "POST",
                dataType: 'json',
                contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                data: { "data": formData, "dataSub": detailSFData },
                success: function (data)
                {
                    grid.dataSource.read();

                    loadPartialView(data.Id);

                    $isDirty = false;
                    $hasErrors = false;
                 },
                 error: function (XMLHttpRequest, textStatus, errorThrown) {
                     Swal.fire({
                         icon: 'warning',
                         text: 'An error occured!',
                         showConfirmButton: true,
                     })
                 }
             });
        }
        else
        {
            Swal.fire({
                icon: 'info',
                text: 'Save not successful, User does not have rights!',
                showConfirmButton: true,
            })
        }
    }

    function turnPage(action)
    {
        $.ajax({
            url: "TrnReceivingReceipt/" + action,
            type: "GET",
            dataType: 'json',
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
            data: { "Id": $Entity.Id },
            success: function (data)
            {
                if (data != null)
                {
                    $Entity = data;

                    loadPartialView(data.Id);
                }
            }
        });
    }

    function loadPartialView(id) {
        $("#recordcontentform").empty();
        $("#recordcontentform").load("/TrnReceivingReceipt/ReceivingReceiptDetail?Id=" + id);
    }

    function loadPartialViewLineDetail(id, supplierId)
    {
        $("#linecontentform").empty();
        $("#linecontentform").load("/TrnReceivingReceipt/AddRRLine?rrId=" + id + "&supplierId=" + supplierId);
    }

    function loadPartialViewLineDetailDetail(item)
    {
        var data = JSON.parse(JSON.stringify(item));

        $("#linecontentform").empty();
        $("#linecontentform").load("/TrnReceivingReceipt/DetailRRLine", { rrLine: data });
    }
</script>

@*Detail Methods*@
<script>
    function ComputeLineAmount(isCost) {
        if (isCost == false) {
            $.ajax({

                url: "/TrnReceivingReceipt/GetItemCost",
                dataType: "json",
                data: { "poId": $("#LinePoid").val(), "itemId": $("#LineItemId").val() },
                success: function (data) {
                    document.forms.frmLineDetail.elements.LineCost.value = data.Cost

                    $("#LineAmount").val($("#LineQuantity").val() * $("#LineCost").val());

                    var qty = cdbl(document.forms.frmLineDetail.elements.LineQuantity.value);
                    var cost = cdbl(document.forms.frmLineDetail.elements.LineCost.value);

                    document.forms.frmLineDetail.elements.LineAmount.value = qty * cost;

                    ComputeTax();
                }
            })
        }
        else
        {
            $("#LineAmount").val($("#LineQuantity").val() * $("#LineCost").val());

            var qty = cdbl(document.forms.frmLineDetail.elements.LineQuantity.value);
            var cost = cdbl(document.forms.frmLineDetail.elements.LineCost.value);

            document.forms.frmLineDetail.elements.LineAmount.value = qty * cost;

            ComputeTax();
        }
    }

    function ComputeBaseUnit()
    {
        $.ajax({
            url: "/TrnReceivingReceipt/ComputeBaseUnit",
            dataType: 'json',
            data: {
                "itemId": $("#LineItemId").data("kendoComboBox").value(),
                "unitId": $("#LineUnitId").data("kendoComboBox").value(),
                "vatId": $("#LineVatId").data("kendoComboBox").value(),
                "quantity": document.forms.frmLineDetail.elements.LineQuantity.value,
                "amount": document.forms.frmLineDetail.elements.LineAmount.value,
                "vatAmount": document.forms.frmLineDetail.elements.LineVatAmount.value
            },
            success: function (data)
            {
                $("#LineBaseUnitId").data("kendoComboBox").value(data.BaseUnitId);
                document.forms.frmLineDetail.elements.LineBaseQuantity.value = data.BaseQuantity;
                document.forms.frmLineDetail.elements.LineBaseCost.value = data.BaseCost;
            }
        });
    }

    function ComputeTax()
    {
        $.ajax({
            url: "/TrnReceivingReceipt/ComputeTax",
            dataType: 'json',
            data: {
                "vatId": $("#LineVatId").data("kendoComboBox").value(),
                "wTaxId": $("#LineWTaxId").data("kendoComboBox").value(),
                "quantity": document.forms.frmLineDetail.elements.LineQuantity.value,
                "cost": document.forms.frmLineDetail.elements.LineCost.value,
                "amount": document.forms.frmLineDetail.elements.LineAmount.value
            },
            success: function (data) {
                document.forms.frmLineDetail.elements.LineVatRate.value = data.VatPercentage;
                document.forms.frmLineDetail.elements.LineWtaxRate.value = data.WTaxPercentage;
                document.forms.frmLineDetail.elements.LineVatAmount.value = data.VatAmount;
                document.forms.frmLineDetail.elements.LineWTaxAmount.value = data.WTaxAmount;

                if (data.IsInclusive != true)
                {
                    document.forms.frmLineDetail.elements.LineAmount.value = data.Amount;
                }

                ComputeBaseUnit();
            }
        });
    }

    function UnitIdRouteValues(e) {
        var row = $("#detailSF").find(".k-edit-cell").parent();
        var grid = $("#detailSF").data("kendoGrid");

        var item = grid.dataItem(row);

        if (item != null) {
            return {
                articleId: item.ItemId
            };
        }

        return {};
    }

    function SaveRRLine()
    {
        if ($isNewLine == true) {
            var grid = $("#detailSF").getKendoGrid();
            var newData = new Object();

            $.ajax({
                url: "/TrnReceivingReceipt/GetRRLineInfos",
                dataType: 'json',
                data: {
                    "pOId": $("#LinePoid").data("kendoComboBox").value(),
                    "itemId": $("#LineItemId").data("kendoComboBox").value(),
                    "unitId": $("#LineUnitId").data("kendoComboBox").value(),
                    "branchId": $("#LineBranchId").data("kendoComboBox").value(),
                    "vatId": $("#LineVatId").data("kendoComboBox").value(),
                    "wTaxId": $("#LineWTaxId").data("kendoComboBox").value(),
                    "baseUnitId": $("#LineBaseUnitId").data("kendoComboBox").value()
                },
                success: function (data) {

                    var valPONumber = data.PONumber;
                    var valItemName = data.Item;
                    var valUnit = data.Unit;
                    var valBranch = data.Branch;
                    var valVatInfo = document.forms.frmLineDetail.elements.LineVatRate.value + " " + data.Vat + " => " + document.forms.frmLineDetail.elements.LineVatAmount.value;
                    var valWTaxInfo = document.forms.frmLineDetail.elements.LineWtaxRate.value + " " + data.WTax + " => " + document.forms.frmLineDetail.elements.LineWTaxAmount.value;
                    var valUnitConversionInfo = document.forms.frmLineDetail.elements.LineBaseQuantity.value + " " + data.BaseUnit + " Cost: " + document.forms.frmLineDetail.elements.LineBaseCost.value;

                    newData =
                    {
                        Id : document.forms.frmLineDetail.elements.LineId.value,
                        Poid: document.forms.frmLineDetail.elements.LinePoid.value,
                        ItemId: document.forms.frmLineDetail.elements.LineItemId.value,
                        Particulars: document.forms.frmLineDetail.elements.LineParticulars.value,
                        Quantity: document.forms.frmLineDetail.elements.LineQuantity.value,
                        UnitId: document.forms.frmLineDetail.elements.LineUnitId.value,
                        Cost: document.forms.frmLineDetail.elements.LineCost.value,
                        Amount: document.forms.frmLineDetail.elements.LineAmount.value,
                        BranchId: document.forms.frmLineDetail.elements.LineBranchId.value,
                        Vatid: document.forms.frmLineDetail.elements.LineVatId.value,
                        Vatpercentage: document.forms.frmLineDetail.elements.LineVatRate.value,
                        Vatamount: document.forms.frmLineDetail.elements.LineVatAmount.value,
                        Wtaxid: document.forms.frmLineDetail.elements.LineWTaxId.value,
                        Wtaxpercentage: document.forms.frmLineDetail.elements.LineWtaxRate.value,
                        Wtaxamount: document.forms.frmLineDetail.elements.LineWTaxAmount.value,
                        BaseUnitId: document.forms.frmLineDetail.elements.LineBaseUnitId.value,
                        BaseQuantity: document.forms.frmLineDetail.elements.LineBaseQuantity.value,
                        BaseCost: document.forms.frmLineDetail.elements.LineBaseCost.value,
                        PONumber: valPONumber,
                        ItemName: valItemName,
                        UnitName: valUnit,
                        BranchName: valBranch,
                        VatInfo: valVatInfo,
                        WTaxInfo: valWTaxInfo,
                        UnitConversionInfo: valUnitConversionInfo,
                        IsDeleted: false,
                    };

                    grid.dataSource.insert(newData);
                }
            });
        }
        else {
            $SelectedLine.set("Id", document.forms.frmLineDetail.elements.LineId.value);
            $SelectedLine.set("Poid", document.forms.frmLineDetail.elements.LinePoid.value);
            $SelectedLine.set("ItemId", document.forms.frmLineDetail.elements.LineItemId.value);
            $SelectedLine.set("Particulars", document.forms.frmLineDetail.elements.LineParticulars.value);
            $SelectedLine.set("Quantity", document.forms.frmLineDetail.elements.LineQuantity.value);
            $SelectedLine.set("UnitId", document.forms.frmLineDetail.elements.LineUnitId.value);
            $SelectedLine.set("Cost", document.forms.frmLineDetail.elements.LineCost.value);
            $SelectedLine.set("Amount", document.forms.frmLineDetail.elements.LineAmount.value);
            $SelectedLine.set("BranchId", document.forms.frmLineDetail.elements.LineBranchId.value);
            $SelectedLine.set("Vatid", document.forms.frmLineDetail.elements.LineVatId.value);
            $SelectedLine.set("Vatpercentage", document.forms.frmLineDetail.elements.LineVatRate.value);
            $SelectedLine.set("Vatamount", document.forms.frmLineDetail.elements.LineVatAmount.value);
            $SelectedLine.set("Wtaxid", document.forms.frmLineDetail.elements.LineWTaxId.value);
            $SelectedLine.set("Wtaxpercentage", document.forms.frmLineDetail.elements.LineWtaxRate.value);
            $SelectedLine.set("Wtaxamount", document.forms.frmLineDetail.elements.LineWTaxAmount.value);
            $SelectedLine.set("BaseUnitId", document.forms.frmLineDetail.elements.LineBaseUnitId.value);
            $SelectedLine.set("BaseQuantity", document.forms.frmLineDetail.elements.LineBaseQuantity.value);
            $SelectedLine.set("BaseCost", document.forms.frmLineDetail.elements.LineBaseCost.value);
            $SelectedLine.set("IsDeleted", false);

            $.ajax({
                url: "/TrnReceivingReceipt/GetRRLineInfos",
                dataType: 'json',
                data: {
                    "pOId": $("#LinePoid").data("kendoComboBox").value(),
                    "itemId": $("#LineItemId").data("kendoComboBox").value(),
                    "unitId": $("#LineUnitId").data("kendoComboBox").value(),
                    "branchId": $("#LineBranchId").data("kendoComboBox").value(),
                    "vatId": $("#LineVatId").data("kendoComboBox").value(),
                    "wTaxId": $("#LineWTaxId").data("kendoComboBox").value(),
                    "baseUnitId": $("#LineBaseUnitId").data("kendoComboBox").value()
                },
                success: function (data) {
                    $SelectedLine.set("PONumber", data.PONumber);
                    $SelectedLine.set("ItemName", data.Item);
                    $SelectedLine.set("UnitName", data.Unit);
                    $SelectedLine.set("BranchName", data.Branch);
                    $SelectedLine.set("VatInfo", document.forms.frmLineDetail.elements.LineVatRate.value + " " + data.Vat + " => " + document.forms.frmLineDetail.elements.LineVatAmount.value);
                    $SelectedLine.set("WTaxInfo", document.forms.frmLineDetail.elements.LineWtaxRate.value + " " + data.WTax + " => " + document.forms.frmLineDetail.elements.LineWTaxAmount.value);
                    $SelectedLine.set("UnitConversionInfo", document.forms.frmLineDetail.elements.LineBaseQuantity.value + " " + data.BaseUnit + " Cost: " + document.forms.frmLineDetail.elements.LineBaseCost.value);
                }
            });
        }

        $isNewLine = false;

        $isDirty = true;

        $("#lineDetailModal").modal("toggle");
    }
</script>

@*Additionals*@
<script>
    function FilterLinePOs() {
        return {
            supplierId: $("#SupplierId").data().kendoComboBox.value()
        };
    }

    function FilterLineArticles() {
        return {
            poId: $("#LinePoid").data().kendoComboBox.value()
        };
    }

    function FilterLineUnits() {
        return {
            articleId: $("#LineItemId").data().kendoComboBox.value()
        };
    }
</script>

<script src="~/js/Util.js"></script>